# Core Directives

## 1. Project Mission & AI Philosophy

- **Core Purpose:** Develop a novel-writing application that leverages AI as a powerful assistant throughout the creative process (brainstorming, outlining, editing, research, plot development, coaching).
- **AI's Role is Assisting, NOT Authoring:** AI _never_ generates the final manuscript text. Human writers retain full authorship and creative control. AI tools should empower, guide, and refine, but the writer authors the story.
- **User Experience:** The app must feature beautiful typography, a clean, intuitive, modern, and polished interface that is uncluttered and delightful to use.

## 2. Key Design & UI/UX Principles

- **Typography is Paramount:** Select and implement fonts and text styling that enhance readability and aesthetic appeal.
- **Modern & Clean Interface:** Adhere to contemporary UI/UX best practices. Ensure the interface is intuitive and minimizes cognitive load.
- **Responsive & Accessible:** Guarantee full mobile responsiveness. Implement and test against modern web accessibility standards (WCAG 2.1 AA or higher).
- **Organization Focus:**
  - Structure: `Project > Chapters > Scenes (manuscript text)`.
  - Auxiliary Data: Maintain distinct sections for `Character Cards`, `World Building/Research Notes`, and `Outlines`.

## 3. AI Implementation Guidelines

- **System Prompts:** Invest significant effort in crafting clear, specific, and robust system prompts for each AI feature to ensure high-quality, targeted assistance.
- **AI Model Flexibility:** Utilize the `snowgander` package to allow for potential user choice in AI models and for easier backend model management.
- **Usage & Cost Control:** Implement mechanisms to track AI usage per user and enforce limits based on subscription tiers. This is critical for business viability.
- **Specific AI Feature Reminders:**
  - **Snowflake Outliner:** Guide users from summary to full outline via iterative questioning.
  - **Character Enhancer:** Use Socratic questioning to help writers deepen character backstories and motivations.
  - **Research Assistant:** Facilitate research and compile information into a "world-building bible."
  - **Plot Assistant:** Identify plot holes, suggest resolutions for "plot jams," and offer ideas to enhance engagement.
  - **Writing Coach:** Provide constructive, honest feedback on prose and marketability.
  - **Editor:** Suggest prose improvements without rewriting. The line between assisting and writing is crucial here.

## 4. Technology Stack & Architecture Mandates

- **Primary Stack:** NextJS 15+ (App Router), TypeScript, Tailwind CSS, Supabase (Auth, DB, Storage), Fly.io (Hosting), Docker, Zod (Validation), `snowgander` (AI API).
- **Next.js Usage:**
  - **Default to Server Components:** For performance and SEO.
  - **`"use client"` Directive:** Apply judiciously _only_ for components requiring interactivity, state (hooks), or browser APIs.
- **TypeScript:** Enforce strict typing. Use explicit types for all function parameters, return values, and component props. Define interfaces/types for all data structures.
- **Project Structure:** Strictly follow the defined project structure (see "Coding Principals" in the project brief).
- **Supabase Integration:** Utilize Supabase for all backend services (authentication, PostgreSQL database, file storage).

## 5. Critical Coding Standards

- **Component Design:**
  - Build small, reusable, single-responsibility UI components (SRP).
  - Adhere to SOLID principles.
  - Employ `class-variance-authority` (CVA) for variant-driven styling as demonstrated in the Button component example.
- **DRY (Don't Repeat Yourself):** Abstract repeated logic into custom hooks, utility functions, or higher-order components.
- **Error Handling:**
  - **Client-Side:** Implement user-friendly error feedback (e.g., `sonner` toasts).
  - **Server-Side (API Routes):** Use Zod for robust input validation. Return clear, structured error responses with appropriate HTTP status codes.
- **Security:**
  - Validate ALL external inputs (user-submitted data, API requests) using Zod.
  - Secure API routes with Supabase authentication middleware.
  - Manage all sensitive keys and credentials strictly through environment variables (never commit to repo or expose client-side).
  - Implement CSRF protection (Next.js defaults) and consider CSP headers.
- **Testing:**
  - Write unit tests (Jest/React Testing Library) for UI components and critical utility functions.
  - Develop integration tests for API endpoints and core user flows.
- **Tailwind CSS:**
  - Utilize theme values (spacing, colors, typography) consistently.
  - Avoid magic numbers or arbitrary one-off styles.
  - Extract common UI patterns into reusable React components rather than repeating utility class combinations.
- **Documentation:** Focus on JSDoc for public APIs/functions. Document _why_ complex code exists, not _what_ obvious code does.

## 6. Development Process

- **Version Control:** All code, including this `.clinerules` file, must be version controlled with Git.
- **Code Reviews:** Enforce mandatory code reviews for all changes, focusing on adherence to these rules, correctness, and maintainability.
