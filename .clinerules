# Core Directives

## 1. Project Mission & AI Philosophy

- **Core Purpose:** Develop a novel-writing application that leverages AI as a powerful assistant throughout the creative process (brainstorming, outlining, editing, research, plot development, coaching).
- **AI's Role is Assisting, NOT Authoring:** AI _never_ generates the final manuscript text. Human writers retain full authorship and creative control. AI tools should empower, guide, and refine, but the writer authors the story.
- **User Experience:** The app must feature beautiful typography, a clean, intuitive, modern, and polished interface that is uncluttered and delightful to use.

## 2. Key Design & UI/UX Principles

- **Typography is Paramount:** Select and implement fonts and text styling that enhance readability and aesthetic appeal.
- **Modern & Clean Interface:** Adhere to contemporary UI/UX best practices. Ensure the interface is intuitive and minimizes cognitive load.
- **Responsive & Accessible:** Guarantee full mobile responsiveness. Implement and test against modern web accessibility standards (WCAG 2.1 AA or higher).
- **Organization Focus:**
  - Structure: `Project > Chapters > Scenes (manuscript text)`.
  - Auxiliary Data: Maintain distinct sections for `Character Cards`, `World Building/Research Notes`, and `Outlines`.

## 3. AI Implementation Guidelines

- **System Prompts:** Invest significant effort in crafting clear, specific, and robust system prompts for each AI feature to ensure high-quality, targeted assistance.
- **AI Model Flexibility:** Utilize the `snowgander` package to allow for potential user choice in AI models and for easier backend model management.
- **Usage & Cost Control:** Implement mechanisms to track AI usage per user and enforce limits based on subscription tiers. This is critical for business viability.
- **Specific AI Feature Reminders:**
  - **Snowflake Outliner:** Guide users from summary to full outline via iterative questioning.
  - **Character Enhancer:** Use Socratic questioning to help writers deepen character backstories and motivations.
  - **Research Assistant:** Facilitate research and compile information into a "world-building bible."
  - **Plot Assistant:** Identify plot holes, suggest resolutions for "plot jams," and offer ideas to enhance engagement.
  - **Writing Coach:** Provide constructive, honest feedback on prose and marketability.
  - **Editor:** Suggest prose improvements without rewriting. The line between assisting and writing is crucial here.

## 4. Technology Stack & Architecture Mandates

- **Primary Stack:** NextJS 15+ (App Router), TypeScript, Tailwind CSS, Supabase (Auth, DB, Storage), Fly.io (Hosting), Docker, Zod (Validation), `snowgander` (AI API).
- **Next.js Usage:**
  - **Default to Server Components:** For performance and SEO.
  - **`"use client"` Directive:** Apply judiciously _only_ for components requiring interactivity, state (hooks), or browser APIs.
- **TypeScript:** Enforce strict typing. Use explicit types for all function parameters, return values, and component props. Define interfaces/types for all data structures.
- **Project Structure:** Strictly follow the defined project structure (see "Coding Principals" in the project brief).
- **Supabase Integration:** Utilize Supabase for all backend services (authentication, PostgreSQL database, file storage).

## 5. Critical Coding Standards

- **Component Design:**
  - Build small, reusable, single-responsibility UI components (SRP).
  - Adhere to SOLID principles.
  - Employ `class-variance-authority` (CVA) for variant-driven styling as demonstrated in the Button component example.
- **DRY (Don't Repeat Yourself):** Abstract repeated logic into custom hooks, utility functions, or higher-order components.
- **Error Handling:**
  - **Client-Side:** Implement user-friendly error feedback (e.g., `sonner` toasts).
  - **Server-Side (API Routes):** Use Zod for robust input validation. Return clear, structured error responses with appropriate HTTP status codes.
- **Security:**
  - Validate ALL external inputs (user-submitted data, API requests) using Zod.
  - Secure API routes with Supabase authentication middleware.
  - Manage all sensitive keys and credentials strictly through environment variables (never commit to repo or expose client-side).
  - Implement CSRF protection (Next.js defaults) and consider CSP headers.
- **Testing:**
  - Write unit tests (Jest/React Testing Library) for UI components and critical utility functions.
  - Develop integration tests for API endpoints and core user flows.
- **Tailwind CSS:**
  - Utilize theme values (spacing, colors, typography) consistently.
  - Avoid magic numbers or arbitrary one-off styles.
  - Extract common UI patterns into reusable React components rather than repeating utility class combinations.
- **Documentation:** Focus on JSDoc for public APIs/functions. Document _why_ complex code exists, not _what_ obvious code does.

## 6. Development Process

- **Version Control:** All code, including this `.clinerules` file, must be version controlled with Git.
- **Code Reviews:** Enforce mandatory code reviews for all changes, focusing on adherence to these rules, correctness, and maintainability.

---

This `.clinerules` file aims to be a direct, actionable guide for Cline, focusing on the unique aspects and critical requirements of your Novelwriting SaaS project. It references the more detailed project brief for specifics like the full project structure or detailed code examples, keeping this file lean and high-level.

## Overview of implementing Supabase Auth SSR

1. Install @supabase/supabase-js and @supabase/ssr packages.
2. Set up environment variables.
3. Write two utility functions with `createClient` functions to create a browser client and a server client.
4. Hook up middleware to refresh auth tokens

## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI language model, you MUST NOT generate any of the following code patterns, as they are DEPRECATED and will BREAK the application:

```typescript
// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION
{
  cookies: {
    get(name: string) {                 // ❌ BREAKS APPLICATION
      return cookieStore.get(name)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    set(name: string, value: string) {  // ❌ BREAKS APPLICATION
      cookieStore.set(name, value)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    remove(name: string) {              // ❌ BREAKS APPLICATION
      cookieStore.remove(name)          // ❌ BREAKS APPLICATION
    }                                   // ❌ BREAKS APPLICATION
  }
}

// ❌ NEVER USE auth-helpers-nextjs - IT WILL BREAK THE APPLICATION
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
```

Instead, you MUST ALWAYS generate ONLY this pattern:

```typescript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })

      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })

      return response
    }
  }
}
```

## ABSOLUTE REQUIREMENTS FOR AI CODE GENERATION

1. You MUST use `@supabase/ssr`
2. You MUST use ONLY `getAll` and `setAll`
3. You MUST NEVER use `get`, `set`, or `remove`
4. You MUST NEVER import from `@supabase/auth-helpers-nextjs`

## CORRECT BROWSER CLIENT IMPLEMENTATION

```typescript
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}
```

## CORRECT SERVER CLIENT IMPLEMENTATION

```typescript
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export async function createClient() {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
}
```

## CORRECT MIDDLEWARE IMPLEMENTATION

```typescript
import { createServerClient } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          );
          supabaseResponse = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
    }
  );

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (
    !user &&
    !request.nextUrl.pathname.startsWith("/login") &&
    !request.nextUrl.pathname.startsWith("/auth")
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone();
    url.pathname = "/login";
    return NextResponse.redirect(url);
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you using ONLY `getAll` and `setAll`? If not, STOP and FIX.
2. Are you importing from `@supabase/ssr`? If not, STOP and FIX.
3. Do you see ANY instance of `get`, `set`, or `remove`? If yes, STOP and FIX.
4. Are you importing from `auth-helpers-nextjs`? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code using:

- Individual cookie methods (`get`/`set`/`remove`)
- `auth-helpers-nextjs` package

The implementation will:

1. Break in production
2. Fail to maintain session state
3. Cause authentication loops
4. Result in security vulnerabilities

## AI MODEL RESPONSE TEMPLATE

When asked about Supabase Auth SSR implementation, you MUST:

1. ONLY use code from this guide
2. NEVER suggest deprecated approaches
3. ALWAYS use the exact cookie handling shown above
4. VERIFY your response against the patterns shown here

Remember: There are NO EXCEPTIONS to these rules.
