-- Phase 1: Implement transaction-based credit system and subscription scaffolding

-- 0. Ensure pgcrypto is available for gen_random_uuid()
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 1. Drop the old credit function and columns from the profiles table
DROP FUNCTION IF EXISTS public.increment_credit_usage(UUID, numeric);

ALTER TABLE public.profiles
DROP COLUMN IF EXISTS current_period_credit_usage,
DROP COLUMN IF EXISTS total_credit_usage;

-- 2. Add new columns to the profiles table for credits and Stripe integration
-- Note: We are altering 'profiles' instead of creating a new 'users' table.
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS credit_balance double precision NOT NULL DEFAULT 0.0,
ADD COLUMN IF NOT EXISTS stripe_customer_id text UNIQUE,
ADD COLUMN IF NOT EXISTS stripe_subscription_id text UNIQUE,
ADD COLUMN IF NOT EXISTS stripe_price_id text,
ADD COLUMN IF NOT EXISTS stripe_subscription_status text,
ADD COLUMN IF NOT EXISTS stripe_current_period_end timestamp with time zone,
ADD COLUMN IF NOT EXISTS has_unlimited_credits boolean NOT NULL DEFAULT false,
ADD COLUMN IF NOT EXISTS onboarding_completed boolean NOT NULL DEFAULT false;

-- 3. Update RLS policies and privileges for the profiles table to allow users to update only safe fields.
-- Keep existing view policy if present. Replace update policy and restrict column-level UPDATE privileges.
DROP POLICY IF EXISTS "Users can update their own profile (excluding admin/credit fields)." ON public.profiles;

CREATE POLICY "Users can update their own profile (excluding admin/credit fields)."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Revoke broad UPDATE permissions granted earlier and re-grant only safe columns.
REVOKE UPDATE ON public.profiles FROM authenticated;

-- Adjust this list as needed as your schema evolves. These are safe, user-editable profile fields.
-- Ensure these columns exist before granting (pen_name is present in a later migration).
DO $$
BEGIN
  PERFORM 1 FROM information_schema.columns
  WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'pen_name';
  IF FOUND THEN
    EXECUTE 'GRANT UPDATE (full_name, pen_name, username, avatar_url) ON public.profiles TO authenticated';
  ELSE
    EXECUTE 'GRANT UPDATE (full_name, username, avatar_url) ON public.profiles TO authenticated';
  END IF;
END$$;

-- 4. Create the Credit Transactions Table (for audit log)
CREATE TABLE IF NOT EXISTS public.credit_transactions (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  profile_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  credits_amount double precision NOT NULL, -- Positive for additions, negative for deductions
  source text NOT NULL, -- e.g., 'free-trial', 'one-time-purchase', 'chat-deduction'
  stripe_charge_id text,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.credit_transactions ENABLE ROW LEVEL SECURITY;

-- Users can view only their own credit transactions
DROP POLICY IF EXISTS "Users can view their own credit transactions" ON public.credit_transactions;
CREATE POLICY "Users can view their own credit transactions"
  ON public.credit_transactions FOR SELECT
  USING (EXISTS (
    SELECT 1
    FROM public.profiles
    WHERE profiles.id = credit_transactions.profile_id
      AND profiles.id = auth.uid()
  ));

-- Optional helpful indexes
CREATE INDEX IF NOT EXISTS credit_transactions_profile_id_idx ON public.credit_transactions(profile_id);
CREATE INDEX IF NOT EXISTS credit_transactions_created_at_idx ON public.credit_transactions(created_at);

-- 5. Create the Subscription Plans Table
CREATE TABLE IF NOT EXISTS public.subscription_plans (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  stripe_price_id text UNIQUE NOT NULL,
  name text NOT NULL,
  credits_granted double precision NOT NULL DEFAULT 0.0,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.subscription_plans ENABLE ROW LEVEL SECURITY;

-- Allow public read access to subscription plans
DROP POLICY IF EXISTS "Allow public read access to subscription plans" ON public.subscription_plans;
CREATE POLICY "Allow public read access to subscription plans"
  ON public.subscription_plans FOR SELECT
  USING (true);

-- 6. Create the Processed Stripe Events Table (for idempotency)
CREATE TABLE IF NOT EXISTS public.processed_stripe_events (
  id text PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE public.processed_stripe_events ENABLE ROW LEVEL SECURITY;
-- This table is intended to be accessed only by the service_role key; no user policies are defined.

-- Optional helpful index (primary key already indexed)
-- CREATE INDEX IF NOT EXISTS processed_stripe_events_created_at_idx ON public.processed_stripe_events(created_at);
